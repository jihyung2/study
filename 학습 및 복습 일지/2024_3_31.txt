3/31

https://flatsun.tistory.com/2498

디버그 모드 및 테스트 하기 -> 회사 다니면서 배우기 

* 점심시간엔 질문하지 않기 * (쉬는 시간임)

기존에 했던 프로젝트들은 어짜피 보면 이해가 가기 때문에 흐름만 파악한다.

* 디버깅 사용법 vscode 기준
1. 실행 및 디버그 탭 클릭
2. 중단점을 설정해서 변수값을 변경하거나 조건을 줘서 print문을 사용한 디버깅 보다 쉽게 할 수 있음
* 적응이 필요함 *
	

* vue.js 공부 시작 -> 

	vue.js 개념 ( 2가지 방법이 있음 html에 추가, npm을 사용한 방법)

사용자 인터페이스를 만들기 위한 동적 JavaScript 프레임워크

vue.js 와 SpringBoot 프로젝트 같이 사용하기 
https://velog.io/@oyatrij/Spring-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-Vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1

	사용법

Vue.js를 사용하려면 간단하게 <body></body> 태그 내부에 vue.js 라이브러리를 추가해주면 된다.
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>


	기본 형태

    <script>
      var app = new Vue({
        el: '#app',
        data: {
          message: '안녕하세요 Vue!',
          description: '반갑습니다',
        },
      });
    </script>

Vue 인스턴스를 생성해서 내부의 el 속성과 data 속성을 넣는 것이다.

el 속성은 어떤 id를 가진 html 태그에 종속될 것인지를 표기

쉽게 말해서 script문에 el로 위치를 지정하고, data로 값을 넣는다.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>TEST!!</title>
  </head>
  <body>
    <div id="app">
      <div>{{message}}</div>
      <h1>{{description}}</h1>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script>
      var app = new Vue({
        el: '#app',
        data: {
          message: '안녕하세요 Vue!',
          description: '반갑습니다',
        },
      });
    </script>
  </body>
</html>

Vue 인스턴스를 특정 태그에 종속시키면 Vue 인스턴스 내부에 있는 데이터를 화면으로 뿌려줄 수 있고 동기화가 되어 Vue 인스턴스 데이터가
바뀔 때마다 화면에 표시되는 내용이 바뀌게 만들 수 있다.

	간단한 환경설정 세팅

1. vscode로 html (vue.js)를 실행하려면 open in browser 설치
2. ALT + B를 눌러서 웹페이지를 띄워서 개발하면된다.



	npm을 사용한 cli 환경설정 세팅

https://ojava.tistory.com/185 : npm 세팅
https://medium.com/namoo-dev/vue-js-%EC%9E%85%EB%AC%B8%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-vue-js-%EC%84%A4%EC%B9%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-f2079e3ff79f
vue.js 설치, 프로젝트 생성하는 방법

1. npm install vue
2. npm install -g @vue/cli or yarn global add @vue/cli
3. npm i -g @vue/cli-init

* 공식 템플릿으로 프로젝트 생성하기
4. vue init webpack my-project
* github 저장소에서 프로젝트 가져오기
4. vue init username/repo my-project

5. cd my-project
6. npm run dev - 개발을 시작 ( 샘플 페이지가 열림 )


npm start - 실행
npm run deploy - 배포

app.vue를 수정하면서 개발한다.

html에 추가하는 방법은 간단하기 떄문에 토이프로젝트에 주로 사용하는듯
1. Vue.js를 HTML에 직접 추가할 때는 el 속성을 사용하여 Vue 인스턴스가 적용될 요소를 지정합니다. 예를 들어, el: '#app'과 같이 지정하여 해당 ID를 가진 요소 안에 Vue 인스턴스를 마운트

npm을 통한 vue.js프로젝트는 큰 규모에서 하기 적합
2. Vue CLI를 사용하여 프로젝트를 생성하고 App.vue와 같은 .vue 파일을 사용할 때에는 이와 같은 el 속성을 사용하지 않습니다.





	자주사용하는 vue 명령어

init - 새로운 프로젝트를 생성가능
list
build
create
help

	종속이 잘 되었는가 테스트

1. F12로 크롬 개발자 도구를 킨다.
2. 소스로 html의 코드를 확인할 수 있고
3. 콘솔로 <el명>.message = "원하는 메세지 입력" 으로 값이 실시간으로 바뀌는것을 확인 할 수 있다.



* 개발 하던 과정

시나리오를 작성한다. 

시나리오대로 개발한다 인데

ex) 센서의 데이터가 이런 방식으로 들어오면 이렇게 받아서 이렇게 가공하고 데이터베이스에 저장 

웹에서는 데이터베이스를 참조 (1초마다? 혹은 좋은 방법이 있다면 선택) 해서 웹에 출력해주기

자바가 그나마 가장 자신있고 가장 최근에 했었기 때문에 보면 이해가 되고 작성도 자바 스프링부트로는 문제없이 할 수 있을 것이다.

repository : DB와 소통하는 역할을 한다. or Entity 클래스
controller : 1. 클라이언트와의 소통 받은 데이터를 Service로 넘겨서 가공처리
service : Service에서는 Repository와 소통하며 데이터를 DB에 넣거나 가져온다.

결론으로 Controller는 Client와의 소통을 위한 API의 시작과 끝이라고 생각한다.

Service는 비즈니스 로직 수행 공간이며 Repository는 DB와의 소통 공간이다.

데이터가 들어오면 -> controller에서 RestAPI로(PostMapping) 데이터를 받고 (Requestbody로 getter,setter구조로) 처리 및 가공한다. 후 데이터베이스에 저장해야함 ->
entity의 getter, setter 구조로 보내서 값을 받아온 후 -> Service에서 데이터베이스에 저장하는 연산을 작성 후 -> Repository(JPA로)에서 값을 넣는다.
-> DB에 저장완료
 
controller -> Service -> Repository -> DB

String Builder는 동기화 없는 버퍼

String Buffer는 동기화 지원하는 버퍼

개선점 
1. SerialData를 controller로 옮기기
2. SerialData -> restapi를 사용할 필요가 없었네 어짜피 블루투스 시리얼 포트로 들어오니깐 괜히 썼다

SerilaData->restapi->service->repository



HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, String>> requestEntity = new HttpEntity<>(map, headers);

            ResponseEntity<Map> responseFromPythonServer =
                    restTemplate.postForEntity(pythonServerUrl, requestEntity, Map.class);

            if (responseFromPythonServer.getStatusCodeValue() == 200) {
                Map<String, Object> responseBody = responseFromPythonServer.getBody();
                System.out.println("R3: " + responseBody.get("Answer").toString());
                return responseBody.get("Answer").toString();

* Hashmap 형태의 Rest API 데이터 송신후 응답 받기 (ex) 챗봇을 사용해서 응답 받아오기 
Java Spring Boot -> Python

 HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        System.out.println(map);
        HttpEntity<String> requestEntity = new HttpEntity<>(jsonData, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(REST_API_SERVER, requestEntity, String.class);
        if (response.getStatusCodeValue() == 200) {
            System.out.println("데이터 전송 성공");
        } else {
            System.out.println("데이터 전송 실패");


ObjectMapper -> Json <-> Java객체로 변환해서 사용


* 같은 패키지 안에 있는 코드로 전송

@Autowired
private AllService allService;

allService.saveAllDB(allStoreData);


* 컨트롤러에서 데이터를 인자에 할당하는 대표적인 방법으로는 @RequestBody 와 @RequestParam 이 있다.

https://ocblog.tistory.com/49
CRUD시 GET방식은 URL에 포함해서 보내고, POST방식은 HTTP Body에 포함해서 전송한다.

Json -> RequestBody
url에 붙어서 오는 경우 (<form> 태그 or GET 방식같은 경우) -> RequestParam

RequestBody는 body에 있는걸 가져오고, RequestParam은 url에 있는걸 가져온다.

프론트에서 Ajax를 사용해서 보내는 경우(Fetch API) (JSON 형식) -> RequestBody

url상에서 데이터를 전달하는 경우(form 태그 등) @RequestParam 을 이용하고,

그 외의 경우 @RequestBody 를 이용하자!


* 협업을 위한 git CMD or git gui 사용하기
https://sseozytank.tistory.com/41

git add -> git commit -> git push

 * Git add .
    * Git commit -m “메세지 내용”
    * Git push origin master

기존에 맥북으로 사용 
    * 가장 최근 커밋한 지점으로 롤백하기
        * git reflog
        * git reset —hard HEAD^ (HEAD 대신에 소스 입력가능)
        * git commit -m “커밋 메세지”
        * git push -f origin 
* 깃허브 기존 파일 레파지토리 등록
    * 숨김 파일에서 .git 지우기 (숨김파일 보이기 : Shift + Command + . )
    * Git remote -v : 연결된 레파지토리 확인
    * Git remote remove origin : 연결된 레파지토리 지움
    * Git remote add origin (주소)
    * Git add .
    * Git commit -m “메세지 내용”
    * Git push origin master

git add .
git commit -m "메세지"
git push

git clone 하는법

원하는 위치에 가서 git clone <url주소>


* Git Bash 사용법

리눅스 환경과 유사하게 사용 ( 명령어도 리눅스 )
pwd : 현재위치 확인하기
cd, ls, mk 등

기존 알고있던 사용방법과 유사하지만 복붙이 안되기때문에 직접 tab으로 들어가야함
