4/1 

개인 복습 및 공부

예전에 학부때 배웠던거 간단히 복습하기 

	시간복잡도 복습

시간복잡도는 일반적으로 빅오 표기법으로 나타냅니다.
(최악의 시나리오로 최소 이만한 시간이 걸림)

입력 크기에 상관없이 일정한 연산을 수행 (상수 시간)
void func (int n) {
  printf("%d\n", n);
}
시간복잡도는 O(1)

입력의 크기가 커질 때 연산 횟수가 logN에 비례해서 증가하면 (로그 시간)
for(i=1; i<=n; i*2) {
  ...
}
i값이 반복할 때 마다 2배씩 증가
시간 복잡도는 O(logN)

입력 크기(n)가 커질 때 연산 횟수가 n에 비례해서 증가하면 (선형 시간)
for(i=0; i < n; i++) {
  ...
}
시간 복잡도는 O(n)

입력 크기(n)가 커질 때 연산 횟수가 2**n에 비례해서 증가하면 (2차 시간)
for(i=0; i < n; i++) {
  for(j=0, j < n; j++) {
    ... 
  }
}
시간 복잡도는 O(n**2)

입력 크기가 커질 때 연산수가 2**n에 비례해서 증가하면 (지수 시간)
int func (int n) {
  if (n <= 1) 
    return n;
  return func(n-1) + fun(n-2);
}
시간 복잡도는 O(2**n)

	자료구조 복습

자료 구조의 선택은 효율적인 알고리즘의 선택
선형 자료구조는 데이터를 순서대로 정렬하며, 비선형은 비연속적으로 연결한다.

(선형, 정적 자료구조) 배열(Array) : 동일한 타입의 데이터들을 저장하며, 고정된 크기를 가지고 있음, 인덱싱이 되어 있어 번호로 데이터에 접근 가능
데이터의 추가/삭제가 번거로운 점이 단점이다.

(선형, 동적 자료구조) LinkedList : 각 데이터 시퀀스가 순서를 가지고 연결된 순차적 구조, 동적인 데이터 추가/삭제에 유리하다.
(선형, 동적 자료구조) Queue : 순서가 보존되는 선형 데이터구조, 선입후출(LIFO), 재귀 프로그래밍에서 호출 구현
(선형, 동적 자료구조) Stack : 먼저 입력된 요소를 처리함(FIFO), 대기열 시스템
(선형) Hash Table : 키, 값을 대응시켜 저장하는 데이터 구조

(비선형) Tree : 그래프가 계층적 구조를 가진 형태
(비선형) Graph : 정점과 간선으로 이루어진 사이클이 존재하는 자료구조
(비선형) Heap : 완전 이진 트리의 형태로써 최소(대)값을 빠르게 찾아내는데 유용한 자료구조
(비선형) 우선순위 큐 : 우선순위가 높은 데이터가 먼저 나오도록 하는 자료구조 우선순위가 같으면 FIFO
(비선형) 트라이 : 문자열을 저장하고 빠르게 탐색하기 위한 트리 형태의 자료구조

	알고리즘 복습

버블 정렬 : 인접한 두 데이터의 크기를 비교하여 정렬하는 알고리즘
선택 정렬 : 주어진 데이터 중 최소값을 찾아 순서대로 정렬하는 알고리즘
삽입 정렬 : 1번 인덱스에 위치한 데이터를 기준으로 해당 데이터의 앞 쪽에 위치한 데이터와 비교한다.
퀵 정렬 : 데이터에서 기준점을 정하고 기준점보다 작다면 좌측, 크다면 우측에 정렬, 정렬이 끝날 때마다 재귀함수로 반복하며 최종적으로 정렬된 데이터를 반환
병합 정렬 : 분할 알고리즘을 기반한 정렬으로 재귀함수를 사용한다.
너비 우선 탐색(BFS) : 그래프에서 가까운 노드부터 우선적으로 탐색, 큐를 사용해서 구현
깊이 우선 탐색(DFS) : 하나의 순환 알고리즘으로 백트래킹에 사용하는 탐색 알고리즘, 주로 재귀함수, stack으로 구현한다.

	

깃 관련 내용 수강하기 
자바 관련 강의 수강하기
스프링관련 영상
vue.js 관련 영상 수강
교통용어 (모르는 단어 찾아서 보기)


