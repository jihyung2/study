오라클은 유닉스/리눅스 환경에서 사용하는 관계형 데이터베이스 관리 시스템
MySQL은 오픈소스의 관계형 데이터베이스 관리 시스템
MSSQL은 윈도우 개발환경에서 사용하는 마이크로소프트가 개발한 관계형 데이터베이스 관리 시스템
MariaDB를 주로 사용, MySQl은 오픈소스 라이센스를 따르지만 상업적으로 사용할 때는 상업용 라이센스를 구매해야하고 MariaDB보다 속도가 떨어지기 때문에 
Mysql과 사용법도 비슷하고 여러가지 측면을 따졌을때 MariaDB가 선호되는 추세라고 판단되어 MariaDB를 경험했습니다.

자바의 클래스가 뭔가요
객체지향 언어에서 많이 사용하는 객체를 정의하는 틀 입니다.

자바의 메소드가 뭔가요
클래스가 전체 기능을 묶는 틀 이라면, 메소드는 기능의 동작을 묶는 틀 입니다.

REST가 뭔가요
web url로 http 통신을 하며 메소드(get, put, post, delete)를 사용하여 CRUD(Create, Read, Update, Delete)연산을 수행하는 서버 클라이언트 통신 방식입니다.

HTTP란 웹 상에서 클라이언트와 서버 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜

REST 메소드인 Get과 Post의 차이가 뭔가요?

GET은 url에 정보를 포함하여 전송하고, 서버에서 어떤 데이터를 가져와서 보여줄 때 사용
POST는 정보를 HTTP Body에 포함하여 전송합니다. 서버상의 데이터 값이나 상태를 바꾸기 위해 사용

객체지향 언어(OOP)가 뭔가요?
객체지향 언어란 프로그램을 객체로 나누어 객체간 상호작용이 가능하게 하는 프로그래밍 언어 입니다.
기능이 아닌 객체가 중심이며 모듈의 재사용으로 확장 및 유지보수가 용이합니다.

패리티 비트가 뭔가요?
전송하고자 하는 데이터의 끝에 1비트를 더해 전송하는 방법으로 0과 1비트를 더해 데이터의 오류를 검출하는 오류식별자 입니다.

오버로딩 : 하나의 클래스에 같은 이름의 메서드를 여러개 정의하는 것, 매개변수의 유형과 개수가 다르도록 사용

오버라이딩 : 상위클래스를 하위클래스에서 호출하여 재정의 하는 것

오버로딩이나 오버라이딩을 활용하여 자바의 다형성을 지원함, 다형성이란 하나의 메서드나 클래스가 있을 때 그것이 다양한 방법으로 동작하는 것

Java의 접근 제어자 종류 : 
public - 접근제어 없음
private - 해당 클래스 내에서 접근 가능
protected - 같은 패키지 내에서와 다른 패키지의 자손 클래스에서 접근 가능
default - 같은 패키지 내에서만 접근 가능

생성자란 : 클래스와 같은 이름의 메서드로, 새 객체가 생성될 때 호출되는 메서드 입니다.

자바 프로그램을 실행하게 되면 JVM(Java Virtual Machine)은 OS로부터 메모리를 할당받음
할당 받은 메모리를 자바 프로그램에 맞게 여러개의 영역으로 나누어 사용한다.

자바 메모리 구조
힙 : 사용자가 직접 관리하는 영역으로 실제 데이터가 동적으로 할당
스택 : 함수의 호출 정보, 기본자료형, 지역변수, 매개변수들이 저장
스태틱(메소드) : 클래스 변수나 static으로 선언된 것들이 저장됨 (class의 정보, static 변수, 생성자, 메소드 저장)

new 키워드로 인스턴스를 생성하면 Heap영역에는 생성된 객체가 저장, Stack 영역에서 생성된 객체에 대한 주소(Reference) 값이 저장됨
public class Variable { 

   public static int age = 20; // 클래스 변수(전역 변수)
    
    int height = 60; // 인스턴스 변수(전역 변수)
    
    public static void main(String[] args) { // 매개변수(파라미터)
       int size = 50; // 지역변수
        
    }
}

Animal a = new Animal("bird")
Animal("bird") : Heap Area
a : Stack Area

자바 equals() 는 객체간의 값(value)을 비교할 수 있고, == 은 대상의 주소(reference)를 비교합니다.
쉽게 말해서 ==는 int나 boolean에 사용하고, equals는 문자열 비교에 사용

TCP - 신뢰성 있는 통신에 사용, UDP보다 느림, 손상되면 재전송
UDP - 비 연결형 프로토콜, 순서 섞이고, 손상된 데이터 재전송 하지않음 주로 스트리밍 같은 곳에서 사용함

IP - 인터넷 망을 통해 패킷을 전달하는 프로토콜

트랜잭션 특징 ACID : A 원자성 C 일관성 I 격리성 D 지속성

NOSQL : Not Only SQL의 약자로 SQL을 보완한다는 의미를 가지고있고, 스키마가 없어서 속도가 빠르다.

스키마 : 데이터베이스의 구조와 제약조건에 대한 명세를 기술한 집합

객체지향 : 현실세계의 객체라는 개념을 이용한 프로그래밍

절차지향 : 수행되어야 할 연속적인 계산과 과정을 포함하고 있는 프로그래밍

Java와 Python 의 차이 : 사용 목적이 다르다고 생각합니다.

파이썬은 객체지향 언어이면서 스크립트 언어이기 때문에 컴파일 과정이 없어 속도가 느리다., AI개발 및 데이터 분석에 사용
C는 절차지향형 언어, 하드웨어 제어 시스템에 사용
C++은 객체지향, 게임 개발에 사용
Java는 웹 서비스 개발, 안드로이드 개발에 사용

객체지향 프로그래밍의 장점 : 코드 재사용성, 유지보수가 좋다
단점 : 속도가 느리다. 용량이 크다, 설계에 시간이 많이 소요된다.

스프링 프레임워크 : 자바 플랫폼을 위한 오픈 소스 어플리케이션 프레임워크 입니다. 동적인 웹 사이트를 개발하기 위해 서비스를 제공합니다.

MVC란 모델, 뷰, 컨트롤러로
모델은 알고리즘, DB와 같은 상호작용을 담당하고
뷰는 요청에 대한 처리 결과를 클라이언트에게 화면을 통해 보여줌
컨트롤러는 모델과 뷰 사이의 요청을 처리하고 흐름 제어를 담당

큐와 스택 : 스택은 가장 마지막에 삽입 되는 데이터가 가장 먼저 출력
큐는 가장 먼저 들어온 데이터가 먼저 나가는 구조

JPA란 ORM 기술로 객체와 데이터베이스의 데이터를 연결해주는 매핑 기술
ORM이기 때문에 자바 클래스와 DB테이블을 매핑한다.(SQL을 매핑하지않는다)

SQL - 관계형 데이터베이스의 데이터를 관리하기 위해 설계된 프로그래밍 언어
DDL : 데이터 정의 언어, Create, Drop, Alter
DML : 데이터 조작 언어, Select, Insert, Update, Delete
DCL : 데이터 제어 언어, Grant, Revoke

RPA :가상 소프트웨어 로봇을 사용해 시간이 많이 드는 수작업을 수행하는 자동화 기술입니다.

Was와 웹서버 차이점
Was는 웹 애플리케이션 서버로 주로 DB와 연결되어 사용 동적인 데이터를 위주로 처리하는것
웹 서버는 브라우저의 요청을 받아 결과를 웹 브라우저로 띄우는것, 정적 데이터 처리

비동기 방식에 대해 설명
비동기 방식이란 요청이 들어오면 다 끝내고 다음 요청을 받는 직렬형 동기 방식이 아닌, 
요청이 들어오면 해당 요청의 작업이 끝나지 않아도 계속 작업을 받아 처리하는 병렬형 구조

데이터베이스의 뷰
데이터를 보여주는 역할만 수행하는 가상 테이블

JSP는 Java Server Page로 HTML내에 직접 자바코드를 삽입하여 웹 서버에서 동적으로 웹 페이지를 생성하는 서버
Java는 서버쪽, JS는 클라이언트쪽 언어

자바 기초 문법
[]는 배열을 나타내는 데 사용됩니다. 
배열은 동일한 유형의 여러 요소를 저장하는 자료구조입니다.
 [] 안에는 배열의 크기를 나타내거나 비워둘 수도 있습니다. 
예를 들어, int[] numbers = new int[5];는 numbers라는 이름의 int 형식의 배열을 생성하고, 배열의 크기를 5로 설정합니다.

<>는 제네릭(Generic) 타입을 나타내는 데 사용됩니다. 
제네릭은 클래스 또는 인터페이스를 정의할 때, 타입 매개변수를 사용하여 클래스나 인터페이스가 다양한 유형의 객체를 다룰 수 있도록 합니다. 
예를 들어, ArrayList<String> list = new ArrayList<>();는 list라는 이름의 ArrayList 객체를 생성하며, 이 리스트는 문자열 타입의 요소를 저장할 수 있도록 정의됩니다.
[]는 배열의 크기를 나타내는 데 사용되고, <>는 제네릭 타입을 나타내는 데 사용됩니다. 이들은 서로 다른 문법적인 의미를 가지고 있으며, 다른 용도로 사용됩니다.

자바에서 배열과 리스트
배열 : Array, 배열은 정의와 동시에 길이를 지정해야하며 길이를 중간에 바꿀 수 없음
index를 통해 데이터에 접근 가능(Index는 데이터 식별자 역할), 정적이므로 크기를 초기에 지정해줘야함
int[] arr1 = new int [10];
정렬하기
int[] arr = {3,4,123,4534,1234,152,1};
Arrays.sort(arr);

리스트 : List, 배열과 다르게 빈 공간을 허용하지 않음
List에서의 Index는 데이터의 식별자가 아닌 몇 번째에 위치하였는지에 대한 의미만 갖는다.
동적으로 배열의 크기가 정해져있지 않다.
ArrayList<Integer> integers1 = new ArrayList<>();

List<Integer> list = new ArrayList<>();

list에 있는 데이터 개수 찾기
// size()
list.size();

리스트의 데이터를 가져올 때 사용
list.get(1);

data추가
// add(추가할 데이터)
// 위치 지정을 하고 싶다면 add(추가할 위치, 추가할 데이터);
list.add(10);
list.add(12);

데이터 수정 
// set(데이터 index, 변경할 값);
list.set(0, 15);

Element삭제
// remove(index값 또는 삭제할 값);
// remove method는 해당 index값을 삭제하고 값을 return한다.
// 값으로 삭제에 성공하면 true, 실패하면 false 리턴
list.remove("사과");

// 인덱스로 삭제에 성공하면 삭제한값을 리턴, 실패하면 false 리턴
list.remove(0);

// 값을 전체 다 삭제할 때는 clear(); 를 호출한다.
list.clear();


값 존재 유무 확인
// contains(찾고자 하는 값);
// contains는 값이 존재하는지에 대한 유무만을 return, true false 리턴해줌
list.contains(13);

// indexOf(찾고자 하는 값);
// indexOf는 찾고자 하는 값의 위치를 return해준다. (값이 없으면 -1 return)
list.indexOf(10);


배열이 비었는지 확인
// isEmpty();
// boolean type으로 return된다. 비어있으면 true, 비어있지 않으면 false
list.isEmpty();

Array와 List비교
Array는 데이터의 추가/삭제가 느리며 데이터 조회가 빠르다.
List는 데이터의 추가/삭제가 빠르며 데이터의 조회가 느리다.
데이터의 추가공간이 필요없이 크기가 정해져있고 추가적인 삽입/삭제 없이 검색을 필요로 할 때 유리하다.
데이터의 크기가 정해져있지 않고 데이터의 삽입/삭제가 많은 경우 유리하다.

크기 조정: 배열의 크기는 선언할 때 정해지고, 이후에는 변경할 수 없다. 반면에 List는 동적으로 크기를 조정할 수 있다. 요소를 추가하거나 제거할 때 List의 크기가 자동으로 조정되므로 편리하다.

삽입과 삭제: List는 요소의 삽입과 삭제가 쉽다. 요소를 삽입하려면 인덱스를 지정하고 값을 추가하면 되며, 요소를 삭제하려면 인덱스나 값으로 제거할 수 있습니다. 배열의 경우 요소를 삽입하거나 삭제하려면 많은 작업이 필요하다.

유연한 자료형: List는 여러 가지 자료형의 요소를 저장할 수 있다. 예를 들어, 정수, 문자열, 객체 등 다양한 유형의 데이터를 한 List에 저장할 수 있다. 하지만 배열은 하나의 자료형만 저장할 수 있다.

편리한 메서드: 자바의 List 인터페이스를 구현한 클래스들은 다양한 메서드를 제공한다. 예를 들어, 요소 검색, 정렬, 필터링 등의 작업을 쉽게 수행할 수 있다. 이러한 메서드를 사용하면 코드 작성과 유지보수가 간편해진다.

제네릭 타입: List는 제네릭 타입을 지원하므로, 컴파일 시에 타입 안정성을 보장할 수 있다. 타입 안정성을 유지하면 코드의 신뢰도와 유지보수성이 향상된다.

결론적으로, 자바에서 List를 사용하면 배열보다 유연하고 편리한 데이터 구조를 구현할 수 있다. List는 크기 조정, 삽입 및 삭제, 다양한 자료형 지원, 편리한 메서드, 제네릭 타입 등의 장점을 가지고 있어 많은 상황에서 배열보다 선호되는 선택이다.

자바의 Map은 파이썬의 딕셔너리와 유사한 구조로

리스트나 배열처럼 순차적으로 해당 요소 값을 구하지 않고 Key를 통해 Value를 얻는다.
많이 사용하는 방식

람다식 예제: 
 (1. 메서드) 
void PrintVal(String name, int i){
    System.out.println(name+"="+i); 
}
 (1. 람다식)
 (name, i) -> System.out.println(name+"="+i)

 (2. 메서드)
 int square(int x){
    return x*x
 }
 (2. 람다식)
 x -> x*x

 (3. 메서드)
 int roll(){
    return (int) (Math.random()*6);
 }
 (3. 람다식)
 () ->  { return (int) (Math.random()*6) }

 (4. 메서드)
 int sumArr(int[] arr){
    int sum = 0;
    for (int i : arr){
        sum+=i;
    }
    return sum;
 }
 (4. 람다식)
 (int[] arr) -> {int sum = 0;
    for (int i : arr){
        sum+=i;
    }
    return sum;
 }

public static void main(String[] args) {

        List<String> myList = new ArrayList<>();

        String course1 = "웹개발의 봄 Spring";
        String course2 = "프론트엔드의 꽃 React";

        // 리스트에 요소넣기 리스트.add()
        myList.add(course1);
        myList.add(course2);

        System.out.println(myList);

        // 리스트 요소 가져오기 리스트.get()
        System.out.println(myList.get(1));

        // 리스트 요소 지우기 리스트.remove()
        myList.remove(1);

        System.out.println(myList);

    }

* 자바 문자열 비교하기
compareTo() - 문자열의 사전순 값을 비교하여 그에 해당되는 int값을 리턴
예로 A > B 라고 가정하면,
- A = A  =  0 (동일한 경우) 
- A > B  =  1 (좌측 값이 큰 경우) 
- B > A  = -1 (좌측 값이 작은 경우) 

compare() - Comparator 인터페이스를 구현할 때 작성해야하는 메서드이다.
실제로 구현할 때 compare()에 2개의 인자를 넘겨 내부에 구현에 따라 int 결과 값을 리턴한다.

* 배열의 sort
public static void main(String[] args) {
        int[] intArr = {8,7,6,5,4};
        for(int i: intArr) 
            System.out.print(i + " ");
        System.out.println();
      //8 7 6 5 4

        Arrays.sort(intArr);
        for (int i : intArr) 
            System.out.print(i + " ");
        System.out.println();
      //4 5 6 7 8

        // String
        String[] strArr = {"d", "c", "b", "a"};
        for(String s: strArr) 
            System.out.print(s + " ");
        System.out.println();
        // d c b a

        Arrays.sort(strArr);
        for (String s : strArr) 
            System.out.print(s + " ");
        System.out.println();
      // a b c d

        Arrays.sort(strArr, Collections.reverseOrder());
        for (String s : strArr) 
            System.out.print(s + " ");
      // d c b a
    }

-HashMap 특징

1. 요소의 저장 순서를 유지하지 않습니다.

2. key :  중복을 허용  X 

   value :  중복은 허용 O

HashMap<String, String> map = new HashMap<String, String>();
map.put("people", "사람");
map.put("baseball", "야구");

get

key에 해당되는 값을 얻기 위해서는 다음과 같이 한다.
System.out.println(map.get("people"));
위와같이 get 메소드를 이용하면 value값을 얻을 수 있다. 위 예제는 결과로 "사람"이라는 문자열을 출력할 것이다.

containsKey

containsKey 메소드는 맵(Map)에 해당 키(key)가 있는지를 조사하여 그 결과값을 리턴한다.
System.out.println(map.containsKey("people"));
"people"이라는 키는 존재하므로 true가 출력될 것이다.

remove

remove 메소드는 맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.
System.out.println(map.remove("people"));
"people"에 해당되는 아이템(people:사람)이 삭제된 후 "사람"이 출력될 것이다.

size
size 메소드는 Map의 갯수를 리턴한다.
System.out.println(map.size());

만약 입력된 순서대로 데이터를 가져오고 싶을때는 LinkedHashMap을 사용한다.
TreeMap은 입력된 key의 소트순으로 데이터가 출력되는 특징을 가지고 있다.

TreeMap은 키와 값을 한 쌍으로 하는 데이터를 이진 검색 트리의 형태로 저장한다.

* int와 Integer의 차이
int는 정수형 변수의 타입이고
Integer는 int 자료형을 객체로 다루기 위한 클래스 (Wrapper 클래스)
정수값만을 참조할 경우 int가 효율적이지만, 정수값을 객체로 사용하거나 메서드 및 속성의 사용이 필요한 경우 Integer 클래스를 사용한다.
double - Double
float - Float
long - Long
int - Integer
short - Short
byte - Byte
char - Character
boolean - Boolean

* 스트림이란
자바 8 API에 새로 추가된 기능으로 스트림을 이용하면 선언형으로 컬렉션 데이터를 처리할 수 있다.
데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소로 정의가능
filter, map, reduce, find, match, sort 등으로 데이터를 조작가능

List<String> teenagerNames = members.stream()
        .filter(member -> member.getAge() < 20) // 내부 반복
        .map(Member::getName) // 파이프라이닝이 가능하다. 내부 반복
        .collect(toList());


    📃 클래스
객체를 나타내기 위한 자바의 도구(= 정보를 묶는 것)
클래스 내 정보를 멤버 변수라고 함
클래스명과 똑같은 이름을 가진 메소드를 생성자라고 함


public class Course {
    public String title;
    public String tutor;
    public int days;

      // 이렇게 아무런 파라미터가 없는 생성자를 기본생성자 라고 부릅니다.
    public Course() {

    }

    public Course(String title, String tutor, int days) {
           // this 는 "이것" 이죠? 클래스 변수를 가리킵니다.
        this.title = title;
        this.tutor = tutor;
        this.days = days;
    }
}


private으로 정의한 것을 어떻게 가져올까?
=> Getter / Setter를 이용하자!

Getter는 쉽게 말하면 정보를 가져오는 메소드

Setter는 정보를 바꾸는 메서드

### HTTP 요청 및 응답과 관련된 주요 클래스들과 메서드 설명

#### InputStreamReader: 2
InputStreamReader 클래스는 입력 스트림에서 바이트를 읽어 문자로 변환하는 데 사용됩니다.
BufferedReader와 함께 사용하여 서버 응답의 내용을 문자열 형태로 읽을 수 있습니다.
예제 코드에서 InputStreamReader는 connection.getInputStream()의 결과를 문자열로 읽기 위해 사용됩니다.

#### getInputStream(): 1 
getInputStream() 메서드는 HttpURLConnection 객체로부터 서버 응답 데이터를 읽기 위한 입력 스트림을 가져옵니다.
이 메서드를 호출하면 서버로부터 오는 응답 데이터를 읽을 수 있는 스트림을 얻게 됩니다.

#### DataOutputStream:3
DataOutputStream 클래스는 출력 스트림에 기본 데이터 타입을 쓰기 위해 사용됩니다.
예제 코드에서는 connection.getOutputStream()의 결과를 이용하여 요청 본문에 데이터를 쓰기 위해 사용됩니다.

#### OutputStream (추가 설명):
OutputStream 클래스는 바이트 기반의 출력 스트림을 나타내는 추상 클래스입니다.
HttpURLConnection의 getOutputStream() 메서드는 요청을 보낼 때 사용할 출력 스트림을 반환합니다.

어떤 방향으로 작성하는지 기억해야함

1. HttpURLConnection으로 restapi를 할 url과 연결함
2. DataOutputStream으로 보낼 데이터(출력)으로 데이터를 전송함
3. getInputStream으로 보낸 데이터의 결과값을 읽어들임
4. InputStreamReader으로 읽어들인 결과값을 문자로 변환함

OSI 7계층                     TCP/IP 4계층

L7 응용 계층 : SMTP, FTP, HTTP       L4 응용 계층 : TCP/UDP 기반의 응용 프로그램을 구현할 때 사용, FTP, HTTP, SSH
L6 표현 계층 : ASCII,GIF                  
L5 세션 계층 : API, SOCKET              
L4 전송 계층 : TCP, UDP                  L3 전송 계층 : 통신 노드 간의 연결을 제어하고, 신뢰성 있는 데이터 전송을 담당, TCP, UDP
L3 네트워크 계층 : 라우터                 L2 인터넷 계층 : 통신 노드간의 IP 패킷을 전송하는 기능과 라우팅 기능을 담당, IP, ARP, RARP
L2 데이터링크 계층: 스위치 이더넷      L1 네트워크 계층 : 물리적인 주소로 MAC을 사용, LAN, 패킷망 등에 사용
L1 물리 계층 : 통신 케이블                

* ARP : ARP는 IP 주소를 MAC 주소로 변환해주기 위해 사용 되는 동적 매핑 프로토콜, 목적지 호스트 IP주소는 아는데, MAC주소(물리적 주소)를 모를 경우 사용

TCP/IP 통신은 실시간성 패킷 통신
RestAPI는 단방향 통신
WebSocket은 Restapi를 실시간성 통신하게 만들어주는 패킷 통신

자료구조 공부해가기 

자료구조가 메모리공간을 효율적으로 사용하는데 필요함

자료구조에는 선형 구조 선형, 비선형으로 나눠지는데

비선형에는 트리, 그래프가 존재한다.
선형에는 정적 자료구조인 배열과
동적 자료구조인 리스트, 큐, 스택이 있다.

스택은 LIFO 큐는 FIFO 선입선출
리스트는 순서가 있고, 삽입 삭제가 쉽고 검색이 느리고
배열은 순서가없고 중간에 데이터가 빠져도 그대로 냅둠, 삽입삭제가 어렵고 검색이 빠름

네트워크 통신과정
보내는쪽
응용계층에서 클라이언트에서 어디에 무엇을 보낼지를 OS에 부탁하고
전송계층에서 OS에서 어디에 보낼지 정보와 무엇을 보낼지에 관한 정보 등을 담아 소켓 형태로 담고 패킷으로 쪼갠다.
인터넷계층, 네트워크 계층에서 쪼개진 패킷을 서버에 전송한다.
받는쪽
서버에 도착하면 소켓을 다시 조립하고
재구성된 소켓에서 ip주소를 얻고 ARP로 MAC주소를 얻어낸다.

naver.com에 들어가기 위해 일어나는 일
평소에 네이버에 들어가봤는지, 캐시 서버와 호스트 서버에서 해당 URL(www.naver.com)의 IP주소를 찾아봅니다.

있다면 사용하고, 없다면 위의 과정을 통해 DNS 서버에 내가 가고자 하는 URL의 IP를 알려달라는 요청을 보냅니다.

해당 요청을 통해 받아온 IP주소로 웹사이트에 대한 데이터들을 달라는 요청을 받아온 IP 주소로 보냅니다.

받아온 데이터들을 렌더링하고 가공하여, 우리가 아는 네이버의 모습을 보여줍니다.

이 과정에서 DNS에서 IP를 받아오는 일, naver의 서버에서 데이터들을 받아오는 일들은
전부 위의 각각의 계층을 통과하는 네트워크 통신 과정을 통해 일어납니다.

물리: 보내는 쪽에서 전송한 전기 신호를 1계층 장비(허브, 케이블 등)가 재생성해서 2계층으로 전달
데이터: 2계층은 1계층으로부터 받은 전기 신호를 데이터 형태로 변환.
이 데이터에 있는 목적지가 내 랜카드의 MAC 주소랑 맞는지 확인하여 맞으면 3계층으로 데이터를 전달 아니면 폐기
네트워크:3계층은 2계층으로부터 받은 MAC주소랑 3계층의 IP주소를 확인해서 알맞은 단말기로 라우터가 최적의 경로를 찾아서 패킷을 전달
전송: 4계층은 3계층으로 부터 받은 패킷의 시퀀스, ACK 번호 및 포트번호를 확인해서 해당 패킷을 차단시키거나 통과시킴
세션: 5계층은 보내는 쪽과 받는 쪽을 연결하고 안정적으로 유지되도록 관리. 패킷 전송이 완료되면 연결을 끊는 역할을 수행
표현: 6계층은 받은 패킷을 자신의 시스템 또는 애플리케이션에 맞게 인코딩 또는 암호화 등을 하여 통일된 형식으로 변환
응용: 7계층은 6계층으로 부터 받은 통일된 형식의 데이터를 애플리케이션에서 사용

TCP의 연결은 3wayhandshake고 연결해졔는 4wayhandshake
1. 연결 요청
2. 응답 + 응답 대기
3. 응답 -> 연결

1. 연결 종료 요청
2. 응답 + 통신완 기다림
3. 통신 다되면 응답
4. 확인 응답

DNS는 도메인 이름과 ip주소를 변환하는 역할 ( 인터넷 전화번호부 )

JPA를 사용하려면 Entity나 DTO, VO의 개념을 잡아야한다.

Entity란 실제 데이터베이스 테이블과 1:1로 매핑되는 클래스로 데이터베이스 테이블내에 존재하는 컬럼만을 속성으로 가져야한다.

DTO란 view와 통신하기 위한 클래스, getter, setter 메서드 만을 가진 클래스 db에서 데이터를 받고 이 데이터를 스프링부트의 서비스나 컨트롤러 등으로 넘겨주는 역할
* 데이터베이스로부터 받을 데이터들을 어떤 방식, 타입등으로 보낼 것인지 정의해 놓는 클래스
ex) public class UserDTO {
    
    private String name;
    private String id;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
    
}

DAO란 레포지토리 패키지로 실제로 db에 접근하여 data를 crud하는 객체
서비스와 데이터베이스를 연결해주는 역할, 
*JPA에서는 DB에 데이터를 CRUD하는 Repository 객체들이 DAO라고 볼 수 있음. 완전히 같지는 않지만 개념차이로 실제로 개발할 때는 비슷하게 사용
*DAO의 경우 데이터베이스와 연결할 connection까지 설정되어 있는 경우가 많아, 현재 많이 쓰이는 Mybatis등을 사용할 경우 커넥션 풀까지 제공되고 있기 때문에 DAO를 별도로 만드는 경우는 드물다.

VO란 DTO와 혼용해서 쓰지만 미묘한 차이가 있다. VO는 값 오브젝트로써 값을 위해 쓰인다.
자바는 값 타입을 표현하기 위해 불변 클래스를 만들어서 사용하는데, 불변이라는 것은 readonly 특징을 가집니다.
*오직 Getter만 가능해야함, Setter 존재 x, 고정된 값을 사용하고 호출할 때 VO 사용
ex) class BookVO {
     private Long id;
     private String title;
     private String contents;

     @Override
     public boolean equals(Object o) {
           if (this == o) return true;
           if (o == null || getClass() != o.getClass()) return false;
           BookVO bookVO = (BookVO) o ;
           return Objects.equals(id, bookVO.id);
     }

     @Override
     public int hashCode() {
          return Objects.hash(id);
     }
}

자바의 인터페이스는 클래스를 작성할 때 기본이 되는 틀을 제공하면서 다른 클래스 사이의 매개 역할까지 담당하는 일종의 추상클래스
추상 클래스는 추상 메소드 뿐만 아니라 생성자, 필드, 일반 메소드도 포함할 수 있지만, 인터페이스는 오로지 추상 메소드와 상수만을 사용합니다.

둘의 가장 큰 차이로는 인터페이스는 틀만 쓰고, 추상 메소드는 확장해서 사용하는 느낌

싱글톤 패턴은 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴입니다.
인스턴스가 1개만 존재해야 한다는 것을 보장하고 싶은 경우와 동일한 인스턴스를 자주 생성해야 하는 경우에 주로 사용한다.

URL과 URI의 차이점
URI는  자원자체를 식별하는 방법
URL은 자원이 어디있는지 위치를 알려주는 것

ex) http://www.naver.com/index.html?page=1232950&id=776
URI :  http://www.naver.com/index.html?page=1232950&id=776
URL : http://www.naver.com/index.html

