자바스프링 및 자바 공부


자바 기초 문법
[]는 배열을 나타내는 데 사용됩니다. 
배열은 동일한 유형의 여러 요소를 저장하는 자료구조입니다.
 [] 안에는 배열의 크기를 나타내거나 비워둘 수도 있습니다. 
예를 들어, int[] numbers = new int[5];는 numbers라는 이름의 int 형식의 배열을 생성하고, 배열의 크기를 5로 설정합니다.

<>는 제네릭(Generic) 타입을 나타내는 데 사용됩니다. 
제네릭은 클래스 또는 인터페이스를 정의할 때, 타입 매개변수를 사용하여 클래스나 인터페이스가 다양한 유형의 객체를 다룰 수 있도록 합니다. 
예를 들어, ArrayList<String> list = new ArrayList<>();는 list라는 이름의 ArrayList 객체를 생성하며, 이 리스트는 문자열 타입의 요소를 저장할 수 있도록 정의됩니다.
[]는 배열의 크기를 나타내는 데 사용되고, <>는 제네릭 타입을 나타내는 데 사용됩니다. 이들은 서로 다른 문법적인 의미를 가지고 있으며, 다른 용도로 사용됩니다.

자바에서 배열과 리스트
배열 : Array, 배열은 정의와 동시에 길이를 지정해야하며 길이를 중간에 바꿀 수 없음
index를 통해 데이터에 접근 가능(Index는 데이터 식별자 역할), 정적이므로 크기를 초기에 지정해줘야함
int[] arr1 = new int [10];
정렬하기
int[] arr = {3,4,123,4534,1234,152,1};
Arrays.sort(arr);

리스트 : List, 배열과 다르게 빈 공간을 허용하지 않음
List에서의 Index는 데이터의 식별자가 아닌 몇 번째에 위치하였는지에 대한 의미만 갖는다.
동적으로 배열의 크기가 정해져있지 않다.
ArrayList<Integer> integers1 = new ArrayList<>();

List<Integer> list = new ArrayList<>();

list에 있는 데이터 개수 찾기
// size()
list.size();

리스트의 데이터를 가져올 때 사용
list.get(1);

data추가
// add(추가할 데이터)
// 위치 지정을 하고 싶다면 add(추가할 위치, 추가할 데이터);
list.add(10);
list.add(12);

데이터 수정 
// set(데이터 index, 변경할 값);
list.set(0, 15);

Element삭제
// remove(index값 또는 삭제할 값);
// remove method는 해당 index값을 삭제하고 값을 return한다.
// 값으로 삭제에 성공하면 true, 실패하면 false 리턴
list.remove("사과");

// 인덱스로 삭제에 성공하면 삭제한값을 리턴, 실패하면 false 리턴
list.remove(0);

// 값을 전체 다 삭제할 때는 clear(); 를 호출한다.
list.clear();


값 존재 유무 확인
// contains(찾고자 하는 값);
// contains는 값이 존재하는지에 대한 유무만을 return, true false 리턴해줌
list.contains(13);

// indexOf(찾고자 하는 값);
// indexOf는 찾고자 하는 값의 위치를 return해준다. (값이 없으면 -1 return)
list.indexOf(10);


배열이 비었는지 확인
// isEmpty();
// boolean type으로 return된다. 비어있으면 true, 비어있지 않으면 false
list.isEmpty();

Array와 List비교
Array는 데이터의 추가/삭제가 느리며 데이터 조회가 빠르다.
List는 데이터의 추가/삭제가 빠르며 데이터의 조회가 느리다.
데이터의 추가공간이 필요없이 크기가 정해져있고 추가적인 삽입/삭제 없이 검색을 필요로 할 때 유리하다.
데이터의 크기가 정해져있지 않고 데이터의 삽입/삭제가 많은 경우 유리하다.

크기 조정: 배열의 크기는 선언할 때 정해지고, 이후에는 변경할 수 없다. 반면에 List는 동적으로 크기를 조정할 수 있다. 요소를 추가하거나 제거할 때 List의 크기가 자동으로 조정되므로 편리하다.

삽입과 삭제: List는 요소의 삽입과 삭제가 쉽다. 요소를 삽입하려면 인덱스를 지정하고 값을 추가하면 되며, 요소를 삭제하려면 인덱스나 값으로 제거할 수 있습니다. 배열의 경우 요소를 삽입하거나 삭제하려면 많은 작업이 필요하다.

유연한 자료형: List는 여러 가지 자료형의 요소를 저장할 수 있다. 예를 들어, 정수, 문자열, 객체 등 다양한 유형의 데이터를 한 List에 저장할 수 있다. 하지만 배열은 하나의 자료형만 저장할 수 있다.

편리한 메서드: 자바의 List 인터페이스를 구현한 클래스들은 다양한 메서드를 제공한다. 예를 들어, 요소 검색, 정렬, 필터링 등의 작업을 쉽게 수행할 수 있다. 이러한 메서드를 사용하면 코드 작성과 유지보수가 간편해진다.

제네릭 타입: List는 제네릭 타입을 지원하므로, 컴파일 시에 타입 안정성을 보장할 수 있다. 타입 안정성을 유지하면 코드의 신뢰도와 유지보수성이 향상된다.

결론적으로, 자바에서 List를 사용하면 배열보다 유연하고 편리한 데이터 구조를 구현할 수 있다. List는 크기 조정, 삽입 및 삭제, 다양한 자료형 지원, 편리한 메서드, 제네릭 타입 등의 장점을 가지고 있어 많은 상황에서 배열보다 선호되는 선택이다.

자바의 Map은 파이썬의 딕셔너리와 유사한 구조로

리스트나 배열처럼 순차적으로 해당 요소 값을 구하지 않고 Key를 통해 Value를 얻는다.
많이 사용하는 방식

람다식 예제: 
 (1. 메서드) 
void PrintVal(String name, int i){
    System.out.println(name+"="+i); 
}
 (1. 람다식)
 (name, i) -> System.out.println(name+"="+i)

 (2. 메서드)
 int square(int x){
    return x*x
 }
 (2. 람다식)
 x -> x*x

 (3. 메서드)
 int roll(){
    return (int) (Math.random()*6);
 }
 (3. 람다식)
 () ->  { return (int) (Math.random()*6) }

 (4. 메서드)
 int sumArr(int[] arr){
    int sum = 0;
    for (int i : arr){
        sum+=i;
    }
    return sum;
 }
 (4. 람다식)
 (int[] arr) -> {int sum = 0;
    for (int i : arr){
        sum+=i;
    }
    return sum;
 }

public static void main(String[] args) {

        List<String> myList = new ArrayList<>();

        String course1 = "웹개발의 봄 Spring";
        String course2 = "프론트엔드의 꽃 React";

        // 리스트에 요소넣기 리스트.add()
        myList.add(course1);
        myList.add(course2);

        System.out.println(myList);

        // 리스트 요소 가져오기 리스트.get()
        System.out.println(myList.get(1));

        // 리스트 요소 지우기 리스트.remove()
        myList.remove(1);

        System.out.println(myList);

    }

* 자바 문자열 비교하기
compareTo() - 문자열의 사전순 값을 비교하여 그에 해당되는 int값을 리턴
예로 A > B 라고 가정하면,
- A = A  =  0 (동일한 경우) 
- A > B  =  1 (좌측 값이 큰 경우) 
- B > A  = -1 (좌측 값이 작은 경우) 

compare() - Comparator 인터페이스를 구현할 때 작성해야하는 메서드이다.
실제로 구현할 때 compare()에 2개의 인자를 넘겨 내부에 구현에 따라 int 결과 값을 리턴한다.

* 배열의 sort
public static void main(String[] args) {
        int[] intArr = {8,7,6,5,4};
        for(int i: intArr) 
            System.out.print(i + " ");
        System.out.println();
		//8 7 6 5 4

        Arrays.sort(intArr);
        for (int i : intArr) 
            System.out.print(i + " ");
        System.out.println();
		//4 5 6 7 8

        // String
        String[] strArr = {"d", "c", "b", "a"};
        for(String s: strArr) 
            System.out.print(s + " ");
        System.out.println();
        // d c b a

        Arrays.sort(strArr);
        for (String s : strArr) 
            System.out.print(s + " ");
        System.out.println();
		// a b c d

        Arrays.sort(strArr, Collections.reverseOrder());
        for (String s : strArr) 
            System.out.print(s + " ");
		// d c b a
    }

-HashMap 특징

1. 요소의 저장 순서를 유지하지 않습니다.

2. key :  중복을 허용  X 

   value :  중복은 허용 O

HashMap<String, String> map = new HashMap<String, String>();
map.put("people", "사람");
map.put("baseball", "야구");

get

key에 해당되는 값을 얻기 위해서는 다음과 같이 한다.
System.out.println(map.get("people"));
위와같이 get 메소드를 이용하면 value값을 얻을 수 있다. 위 예제는 결과로 "사람"이라는 문자열을 출력할 것이다.

containsKey

containsKey 메소드는 맵(Map)에 해당 키(key)가 있는지를 조사하여 그 결과값을 리턴한다.
System.out.println(map.containsKey("people"));
"people"이라는 키는 존재하므로 true가 출력될 것이다.

remove

remove 메소드는 맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.
System.out.println(map.remove("people"));
"people"에 해당되는 아이템(people:사람)이 삭제된 후 "사람"이 출력될 것이다.

size
size 메소드는 Map의 갯수를 리턴한다.
System.out.println(map.size());

만약 입력된 순서대로 데이터를 가져오고 싶을때는 LinkedHashMap을 사용한다.
TreeMap은 입력된 key의 소트순으로 데이터가 출력되는 특징을 가지고 있다.

TreeMap은 키와 값을 한 쌍으로 하는 데이터를 이진 검색 트리의 형태로 저장한다.

* int와 Integer의 차이
int는 정수형 변수의 타입이고
Integer는 int 자료형을 객체로 다루기 위한 클래스 (Wrapper 클래스)
정수값만을 참조할 경우 int가 효율적이지만, 정수값을 객체로 사용하거나 메서드 및 속성의 사용이 필요한 경우 Integer 클래스를 사용한다.
double - Double
float - Float
long - Long
int - Integer
short - Short
byte - Byte
char - Character
boolean - Boolean

* 스트림이란
자바 8 API에 새로 추가된 기능으로 스트림을 이용하면 선언형으로 컬렉션 데이터를 처리할 수 있다.
데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소로 정의가능
filter, map, reduce, find, match, sort 등으로 데이터를 조작가능

List<String> teenagerNames = members.stream()
        .filter(member -> member.getAge() < 20) // 내부 반복
        .map(Member::getName) // 파이프라이닝이 가능하다. 내부 반복
        .collect(toList());


    📃 클래스
객체를 나타내기 위한 자바의 도구(= 정보를 묶는 것)
클래스 내 정보를 멤버 변수라고 함
클래스명과 똑같은 이름을 가진 메소드를 생성자라고 함


public class Course {
    public String title;
    public String tutor;
    public int days;

		// 이렇게 아무런 파라미터가 없는 생성자를 기본생성자 라고 부릅니다.
    public Course() {

    }

    public Course(String title, String tutor, int days) {
			  // this 는 "이것" 이죠? 클래스 변수를 가리킵니다.
        this.title = title;
        this.tutor = tutor;
        this.days = days;
    }
}


private으로 정의한 것을 어떻게 가져올까?
=> Getter / Setter를 이용하자!

Getter는 쉽게 말하면 정보를 가져오는 메소드

Setter는 정보를 바꾸는 메서드

< 사용법 >
1. 클래스에 가서 Getter와 Setter를 정의해준다

// Getter
public String getTitle() {
    return this.title;
}
// Getter
public String getTutor() {
    return this.tutor;
}
// Getter
public int getDays() {
    return this.days;
}

// Setter
public void setTitle(String title) {
    this.title = title;
}
// Setter
public void setTutor(String tutor) {
    this.tutor = tutor;
}
// Setter
public void setDays(int days) {
    this.days = days;
}


2. 메인 클래스에서 Getter와 Setter 사용하려면 호출해서 사용!

Course course = new Course();

System.out.println(course.getTitle());
System.out.println(course.getTutor());
System.out.println(course.getDays());

course.setTitle("웹개발의 봄 스프링");
course.setTutor("남병관");
course.setDays(35);

System.out.println(course.getTitle());
System.out.println(course.getTutor());
System.out.println(course.getDays());



📃 브라우저에 바로 나타내보기
화면에 클래스 정보 띄워보기
=> 데이터로 응답하려면 RestController를 사용!

Rest란?

서버의 응답이 JSON(데이터)형식임을 나타냄
HTML, CSS등을 주고 받을 때는 Rest를 붙이지 않음
Controller란

응답하는 것(자동 응답기!)
클라이언트의 요청(Request)을 전달받는 코드를 Controller라고 부름
=> JSON만을 돌려주는 것을 RestController라고 부름'
즉, RestController란 JSON형식으로 응답하는 자동응답기이다!

<RestController 만들기>

import com.sparta.week01.prac.Course;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

// RestController 만들기
// 클래스 위에 @RestController 넣어줌
@RestController
public class CourseController {

    // 브라우저에서 검색하는 것을 GET방식이라고 함
    // courses로 브라우저에 쳐서 응답이 왔을 때 이 결과를 보여줄거야!
    @GetMapping("/courses")
    public Course getCourses() {
        Course course = new Course();
        course.setTitle("웹개발의 봄 스프링");
        course.setDays(35);
        course.setTutor("남병관");
        return course;
    }
}


자바 기초 문법 + Spring 기초 사용법
https://velog.io/@piczo/Java-%EA%B8%B0%EC%B4%88-%EB%AC%B8%EB%B2%95-Spring-%EA%B8%B0%EC%B4%88-%EC%82%AC%EC%9A%A9%EB%B2%95


스프링이란, + 기본 기능
https://www.codestates.com/blog/content/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8


의존성 줄이는 코드

이러한 코드는 B에서 C로 바뀐다면 코드를 전체 수정해야함
class A{
    public void methodOfA(){
        B b = new B();
        b.example();
    }
}
class B {
    public void example(){
        pass
    }
}



스프링을 사용하면 위처럼 변화가 발생한 상황에 최소한의 수정만으로 변화를 유연하게 수용할 수 있습니다. 
스프링을 사용하여 좀 더 변화에 유연하게 대응할 수 있는 코드를 작성하려면 아래와 같이 코드를 수정해주어야 합니다. 
(1) ~ (5)의 설명을 순서대로 읽으면서 어떤 부분이 어떻게 바뀌었는지 파악해보세요.

(1) A가 사용하는 메서드를 인터페이스 I의 추상 메서드로 정의한 다음, (추상화)
interface I {
    void example();
}

class A{
    (3) 그 다음, 인터페이스 타입의 필드를 선언
    private I i;

    (4) 생성자를 통해 외부로부터 인스턴스를 받아와 i를 초기화 해준다. (다형성)
    public A(I i){
        this.i = i;
    }
    public void methodOfA(){
        (5) 외부로부터 받아온 인스턴스의 메서드를 호출합니다.
        i.example();
    }
}
(2) A가 사용하는 메서드를 가진 객체들이 I
class B implements I {
    public void example(){
        pass
    }
}

class C implements I {
    public void example(){
        pass
    }
}


연습 참고
https://goddaehee.tistory.com/203


java sringboot 첫 실행 

에러발생 -  Unsupported class file major version 64 에러
해결방법 - gradle 파일의 버전을 새로 수정하기 or java의 버전을 낮추기
java20이여서 gradle이 호환하지 않아서 발생하는 에러였음

에러발생 - package org.springframework.web.bind.annotation does not exist
build.gradle을 연후
해결방법 - implementation 'org.springframework.boot:spring-boot-starter-web'

에러발생 - o.s.boot.SpringApplication 에러
build.gradle을 연후
해결방법 - spring boot의 버전을 3.1.1 -> 2.7.5로 낮춤 아마 3.1.1이 SNAPSHOT버전이라 그런듯

spring boot 정리 

src/main/java/com.example.spring/controller/TestController - 스프링 부트에서 웹 페이지의 요청을 처리하는 컨트롤러를 생성합니다. 
컨트롤러는 사용자 요청을 받아들이고 적절한 동작을 수행한 후 응답을 반환합니다.

src/main/resources/static/index.html - 실제 보이는 VIEW 페이지를 만듬

src/main/resources/application.properties - 포트번호 변경 가능 ex) server.port = 8000

build.gradle - 웬만한 설정은 여기서 정리함, springboot버전, 종속성 등등


참고
https://goddaehee.tistory.com/203


8/23 수
파이썬 코드를 자바 코드로 변경하는 작업이 필요한데, 주어진 파이썬 코드는 POST 요청을 보내는 부분이 있습니다.
자바에서 POST 요청을 보내려면 HttpURLConnection을 사용하면 되지만, 파이썬의 딕셔너리와 비슷한 형태인 JSON 데이터를 POST 요청으로 보내기 위해서는
HttpURLConnection을 사용하여 요청 본문에 JSON 데이터를 추가해야 합니다.
자바에서 Json을 사용하려면 아래와 같은 형식으로 사용

ex) Java
URL url = new URL("http://127.0.0.1:5010/query/NORMAL");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json"); //요청헤더 설정
            connection.setRequestProperty("charset", "utf-8"); // 문자 인코딩 설정
            connection.setDoOutput(true); // 요청을 보낼 것 이므로 출력 스트림을 열어 데이터를 보낼 수 있게 설정

            String userText = "for문은 반복문인가요?";
            String requestData = "{\"query\":\"" + userText + "\"}";

            try (DataOutputStream wr = new DataOutputStream(connection.getOutputStream())) {
                byte[] requestDataBytes = requestData.getBytes(StandardCharsets.UTF_8);
                wr.write(requestDataBytes);
            }

기존의 Json 라이브러리를 추가하여 사용했지만, 400에러( 전송 형식이 맞지 않음 )으로 전송 형식을 맞춰서 전송하는 방식으로 변경함
따로 라이브러리를 추가하지 않고 기존 데이터의 형태를 수정함
*UTF_8을 사용하여 한글 형식으로 보내고 받기*

ex) python
datas = {
            "query": str(user_text)
        }
url = "http://127.0.0.1:5010/query/NORMAL"
response = requests.post(url, json=datas)
context.bot.send_message(chat_id=chat_id, text=response.json()['Answer'])
if response.json()['Answer'] == "부정확한 질문이거나 답변할 수 없습니다.":
    sql = "INSERT INTO failanswer (userquery ,aiquery, answer, intent) VALUES (%s, %s, %s, %s)"
    cursor.execute(sql,
                   (str(user_text), response.json()['Query'], response.json()['Answer'],
                    response.json()['Intent']))
db.commit()
db.close()

### HTTP 요청 및 응답과 관련된 주요 클래스들과 메서드 설명

#### InputStreamReader:
InputStreamReader 클래스는 입력 스트림에서 바이트를 읽어 문자로 변환하는 데 사용됩니다.
BufferedReader와 함께 사용하여 서버 응답의 내용을 문자열 형태로 읽을 수 있습니다.
예제 코드에서 InputStreamReader는 connection.getInputStream()의 결과를 문자열로 읽기 위해 사용됩니다.

#### getInputStream():
getInputStream() 메서드는 HttpURLConnection 객체로부터 서버 응답 데이터를 읽기 위한 입력 스트림을 가져옵니다.
이 메서드를 호출하면 서버로부터 오는 응답 데이터를 읽을 수 있는 스트림을 얻게 됩니다.

#### DataOutputStream:
DataOutputStream 클래스는 출력 스트림에 기본 데이터 타입을 쓰기 위해 사용됩니다.
예제 코드에서는 connection.getOutputStream()의 결과를 이용하여 요청 본문에 데이터를 쓰기 위해 사용됩니다.

#### OutputStream (추가 설명):
OutputStream 클래스는 바이트 기반의 출력 스트림을 나타내는 추상 클래스입니다.
HttpURLConnection의 getOutputStream() 메서드는 요청을 보낼 때 사용할 출력 스트림을 반환합니다.

어떤 방향으로 작성하는지 기억해야함

1. HttpURLConnection으로 restapi를 할 url과 연결함
2. DataOutputStream으로 보낼 데이터(출력)으로 데이터를 전송함
3. getInputStream으로 보낸 데이터의 결과값을 읽어들임
4. InputStreamReader으로 읽어들인 결과값을 문자로 변환함

