1장 1/21
스프링 부트의 세 가지 핵심 기능은 의존성 관리 간소화, 배포 간소화, 자동 설정입니다.

스프링 부트와 스타터는 의존성 불일치로 생긴 불필요한 버그 발생하는 어려움을 해결하기 위해 등장
스프링 부트 스타터 : 매번 동일한 방식으로 특정 기능을 제공한다는 입증된 전제를 바탕으로 제작된 BOM.
* BOM(Bills of Material) : 프로젝트 아티팩트(라이브러리 등의 구성 요소)의 정보, 버전과 의존성 관리를 포함한 특수한 POM입니다.
* POM : 빌드 도구에서 의존성을 가져오고 프로젝트 빌드에 사용하는 정보와 프로젝트 구성이 담긴 파일
* 마샬링은 객체의 메모리 표현 방식을 저장이나 전송에 알맞은 데이터 형식으로 변환하는 프로세스. 데이터를 서로 다른 컴퓨터 프로그램간, 혹은 같은 프로그램의 다른 부분에 옮길 때 사용함

spring-boot-starter-web 같은 단일 스타터를 추가하면 단일 애플리케이션에 필요한 기능을 모두 제공한다.

전반적으로 스프링 부트의 스타터 개념은 의존성을 간소화하고 애플리케이션에 기능 전체를 추가하는 데 필요한 작업을 줄여준다.

애플리케이션 배포 기존 방식
1. 애플리케이션 서버를 설치하고 설정
2. 데이터베이스 드라이버를 설치
3. 데이터베이스 커넥션을 생성
4. 커넥션 풀을 생성
5. 애플리케이션을 빌드하고 테스트
6. 애플리케이션과 애플리케이션의 의존성을 애플리케이션에 배포

스프링 부트 설계자는 애플리케이션 JAR와 모든 종속적인 JAR에서 모든 파일을 추출한 다음, 단일 JAR로 결합하는 셰이딩 방식 대신 새로운 관점으로 접근함
JAR을 셰이딩하는 ㄷ대신 중첩된 JAR를 사용하면 많은 잠재적 문제가 완화됨

모든 의존성이 포함된 단일 스프링 부트 JAR는 배포를 용이하게 한다.
모든 의존성을 수집해 배포하는 대신 스프링 부트 플러그인이 모든 의존성을 결과 JAR에 압축한다.
JAR가 있으면, JVM이 있는 환경에서 Java -jar <SpringBootAppName.jar>같은 명령만으로 애플리케이션을 실행한다.

스프링부트의 자동설정
데이터베이스를 자동으로 연결하고, 애플리케이션이 종료되면 연결도 자동으로 종료합니다.
간단한 컨벤션을 따라 개발자가 최소한의 노력으로 쿼리를 자동으로 만듭니다.
개발자의 우선한경은 로컬 호스트, 기본 포트등의 기본값을 지정하지 않아도 개발자가 로컬에서 작업하기 편한 기본값을 제공한다.


